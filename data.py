from math import e, log
from bleach import clean
import pandas as pd
from db_script import get_df_from_query
from db_script import send_sql_query
import psycopg2
from config import DB_ARGS, DATA_PARAMS1
from sql_schema import * 
from sqlalchemy import create_engine
import os
import time
import logging


logging_path = os.path.join("C:/для работы/база/эксперименты/supremeDB", "logs", "data.log")
logging.basicConfig(filename=logging_path,level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')

def reading(file_name, path="./", skiprows=0):

    print("         Чтение")
    
    file_path = os.path.join(path, "source", file_name)

    logging.info(f"Attempting to read file: {file_path}")
    try:        
        df = pd.read_excel(file_path, skiprows=skiprows)
        logging.info(f"Successfully read file: {file_path}")
    except:
        print('     шляпа')
        logging.error(f"Failed to read file: {file_path}. Error: {e}")
        df = None
    return df

def clean_and_convert(df, params):
    logging.info("Starting data cleaning and conversion")
    try:
        for param in params:
            try:
                logging.info(f"Processing category: {param}")
                if param == 'numeric':
                    for col in params[param]:
                        if df[col].dtype == object:
                            df[col] = df[col].str.strip().str.replace(',', '.').str.replace(' ', '')
                        df[col] = pd.to_numeric(df[col], errors='coerce')
                        df[col].fillna(0, inplace=True)
                elif param == 'objects':
                    for col in params[param]:
                        df[col] = df[col].str.strip()
                elif param == 'date':
                    for col in params[param]:
                        df[col] = pd.to_datetime(df[col], errors='coerce')
                        df[col] = df[col].replace({'NaT': None})
            except Exception as e:
                logging.error(f"Error cleaning category {param}: {e}")
    except Exception as e:
        logging.error(f"Failed to clean file: {e}")
    return df

def drop_function(df, number):
    logging.info("Starting column drop process")
    print("         Удаление не нужных столбцов")
    columns_dict = {
        1   :   {
            'name'   :   [],
            'to_drop':   {}
                # 'column': [],
                # 'row'   : []
                # },
            },
        2   :   {
            'name'   :   ["№ п/п", "№ заявки от ОМК", "Тн. по заявке", "Месяц прозв-ва", "Марка стали", "Марка стали.1", "tС", "Диаметр", "Толщина", "Линия произ-ва", "Требования",           
                         "НД на трубу", "НД на лист", "Длина по спец.", "ГОС/ГОЗ", "Дата получения", "Дата получения.1", "День недели", "№ спец-ции", "Дата спец-ции",
                         "Дата выдачи", "Дата  получ. согл.заказа", "Дата  получ. согл.заказа.1", "ПРИМЕЧАНИЕ", "Номенклатурный номер", "изначально к производству", "заказа на трубу",
                         "П/П", "периода треб.дата", "периода ДПТС", "труб, тн.", "Покупатель"],
            # 'to_drop':   ['№ п/п'],
            'to_drop':   {
                'column': ['№ п/п'],
                'row'   : []
                },
        },
        3   :   {
            'name'   :   ["delete", "Планируемый период поставки слябов", "Поставщик", "Дата получения 'Заявки на заказ металла' от ОАО 'ОМК-Сталь'", "№ Заявки на заказ металла от ОАО 'ОМК-Сталь'", 
                          "Дата ввода спецификации в SAP", "№ Спецификации на сляб в SAP", "№ спецификации на лист", "Статус заказа", "Марка стали", "Диаметр трубы", "Толщина листа", 
                          "Толщина сляба", "Ширина сляба", "Длина Сляба", "Раскрой сляба", "Объем сляба", "Получено на ОАО 'ВМЗ' тн", "Недогруз тн"],
            'to_drop':   {
                'column': ['delete'],
                'row'   : ['Планируемый период поставки слябов']
                },
        },
        4   :   {
            'name'   :   [],
            'to_drop':   {},
        },
        5   :   {
            'name'   :   ["Вид заказа","Номер заявки CRM","Статус позиции УПЗ","Дивизион","Ид. задания на производство (Металл)","Ид. задания на производство (Труба)",
                        "Цех","Диаметр","Толщина","Марка стали","Класс прочности","ГОСТ/ТУ","ГОСТ/ТУ внешней изоляции","ГОСТ/ТУ внутреннего покрытия","Толщина изоляции","Номер заказа",
                        "Номер позиции","Изменение","Требуемый объем","Отправлено из цеха","Отгружено","Требуемое кол-во на СГП","Выбрано клиентскими заказами",
                        "Номер связанного заказа (SAP)","Управление","Менеджер","Клиент","Вид транспортировки","Пункт назначения","Требуемая дата","ДПТС",
                        "Статус подтверждения (ГП на СГП)","Статус согласования (ГП на СГП)","Время на доставку, дн","Время на отгрузку, дн","ПДД завершения отгрузки",
                        "Начало интервала доставки","Комментарий к подтверждению (ГП на СГП)","Решение о согласовании (ГП на СГП)","Решение об обеспечении металлом",
                        "Комментарий к подтверждению (металл)","ИДН заявки на металл","Номер заказа.1","Номер заказа.2","Новая потребность","Изменение потребности","Произведено",
                        "Упаковано","Объем по счетам-фактурам","Ед. изм. объема","Требуемая дата доставки","Конец интервала доставки","Класс продукции","Номенклатурный номер",
                        "Описание продукции","Попутчик","Неликвид","Группа прочности","Группа продукции","Количество швов","Тип резьбы",
                        "Термообработка","Номер чертежа колеса","Ширина","Организация","Номер спецификации","Цепочка поставок","Расшифровка вида заказа",
                        "Статус заказа","Статус заказа (расшифровка)","Статус позиции","Статус позиции (расшифровка)","Тип заказа ORM","Место отгрузки ORM",
                        "Состояние позиции ORM","ИНКОТЕРМС","Условия поставки по ИНКОТЕРМС","Рынок сбыта","Номер позиции связанного заказа (SAP)","Тип связанного заказа (SAP)",
                        "Номер связанного заказа (УПЗ)","Номер позиции связанного заказа (УПЗ)","Тип связанного заказа (УПЗ)","Макс объем к доставке, тн/сут","Макс объем к доставке, ваг/сут",
                        "Количество к доставке","Начало ожидаемого интервала доставки","Конец ожидаемого интервала доставки","Статус подтверждения (доставка)",
                        "Комментарий к подтверждению (доставка)","Статус исполнения ( день )","Вид проверки на соответствие","Статус проверки на соответствие","Комментарий к проверке на соответствие",
                        "Результат проверки","Дата УМПО","Дата УФРВУ","БДД начала отгрузки","ПДД начала отгрузки","Начало ожидаемого интервала отгрузки","Конец ожидаемого интервала отгрузки",
                        "Количество к отгрузке","Максимально разрешенный объем к отгрузке, тн/сут","Максимально разрешенный объем  к отгрузке, ваг/сут","Статус подтверждения (отгрузка)",
                        "Комментарий к подтверждению (отгрузка)","Согласованная ДПТС","Зарезервированный запас","Статус нарушения дат отгрузки","Комментарий к согласованию (ГП на СГП)",
                        "Дата согласования (ГП на СГП)","Начало ожидаемого интервала (ГП на СГП)","Конец ожидаемого интервала (ГП на СГП)","Интервал ДПТС (вручную)",
                        "Флаг удовлетворения потребности со склада","Ожидаемая кампания СВАРКА","Агрегат (сварка)","Время начала кампании (сварка)","Время окончания кампании (сварка)",
                        "Ожидаемая кампания ИЗОЛЯЦИЯ","Агрегат (изоляция)","Время начала кампании (изоляция)","Время окончания кампании (изоляция)","Ожидаемая кампания ОТДЕЛКА","Агрегат (отделка)",
                        "Время начала кампании (отделка)","Время окончания кампании (отделка)","Наименование кампании","Статус планирования","Статус подтверждения (производство)",
                        "Комментарий к подтверждению (производство)","Статус проверки УФРВУ","Комментарий к проверке УФРВУ","Флаг соответствия запросу","Производительность СВАРКА",
                        "Комментарий к запросу","Производительность ВНЕШНЯЯ ИЗОЛЯЦИЯ","Классификация ZQT","Производительность ОТДЕЛКА","Комментарий к классификации ZQT","Статус пр-ва",
                        "Комментарий к прогнозу","Стратегия","Требуется процессу ДОСТАВКА","Требуется процессу ОТГРУЗКА","Требуется процессу ПРОИЗВОДСТВО","Требуется процессу НАЛИЧИЕ НА СКЛАДЕ",
                        "Дата (металл)","Статус подтверждения (металл)","Цена EXW, руб/тн","Цена EXW (прогноз), руб/тн","Затраты, руб/тн","Маржа, руб/тн","Маржа, руб/ч",
                        "Производительность по узкому месту","Сквозной выход годного","Окно доходности от","Окно доходности до","Клиент УП","Продукт УП","География УП",
                        "Статус проверки на окно продаж","Статус согласования продаж","Комментарий к согласованию продаж","Маршрут производства","Ид. позиции заказа","Номер заказа прогноза",
                        "Номер позиции прогноза","Проект","Срок жизни запроса","Дата действия ответа на запрос","Дата закрытия УПЗ","Дата создания позиции в ERP системе","Дата создания записи",
                        "Список заказов MM к позиции заказа","Список заказов ZUB к позиции заказа","Список заявок на металл к позиции заказа" ],
            'to_drop':   {},
        },
        6   :   {
            'name'   :   [],
            'to_drop':   {
                'column': 'Unnamed',
                'row'   : []
                },
        },
        7   :   {
            'name'   :   ["№ п/п", "Клиентский заказ", "Номер плавки", "ID Сляба поставщика", "ID материала", "Внешняя марка стали СХ", "Посад в печь Дата", "Посад в печь Смена", 
                          "Посад в печь Время", "Парам сляба при посаде в печь Толщина, мм", "Парам сляба при посаде в печь Ширина, мм", "Парам сляба при посаде в печь Длина, мм", 
                          "Парам сляба при посаде в печь Внешняя марка стали СХ", "Парам сляба при посаде в печь Внутренняя марка стали", "Парам сляба при посаде в печь Вес, тн", 
                          "Парам сляба при посаде в печь Вес теор., тн", "Вид продукции Вид продукции", "Прокатка Дата", "Прокатка Смена", "Прокатка Время начала", "Прокатка Время окончания", 
                          "Ном парам МЛ (полураската) Толщина, мм", "Ном парам МЛ (полураската) Ширина, мм", "Ном парам МЛ (полураската) Длина, мм", "Ном парам МЛ (полураската) Вес, тн", 
                          "Ном парам МЛ (полураската) Ном. марка стали", "Ном парам МЛ (полураската) Ном. SAP ID", "Факт парам МЛ (полураската) Толщина, мм", 
                          "Факт парам МЛ (полураската) Ширина, мм", "Факт парам МЛ (полураската) Длина, мм", "Факт парам МЛ (полураската) Вес, тн", "Сэкв", "Pcm", "Расположение на УЗО Ряд", 
                          "Расположение на УЗО Колонка", "Расположение на УЗО Позиция"],
            'to_drop':   {
                'column': ['№ п/п'],
                'row'   : []
                },
        },
    }

    # print(list(df.columns))
    # print(df)
    try:
        logging.info("Renaming columns if necessary")
        if columns_dict[number]['name']:
            df.columns = columns_dict[number]['name']
    except Exception as e:
        logging.error(f"Failed to rename columns: {e}")

    if columns_dict[number]['to_drop']:
        if columns_dict[number]['to_drop']['column']:
            col = columns_dict[number]['to_drop']['column']
            try:
                if isinstance(col, list):
                    df.drop(columns=col, inplace=True)
                elif col == 'Unnamed':
                    for_drop = [i for i in df.columns if 'Unnamed' in i]
                    df.drop(columns=for_drop, inplace=True)
            except Exception as e:
                logging.error(f"Failed to drop columns: {e}")

        if columns_dict[number]['to_drop']['row']:
            try:
                month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
                df.drop(df[~df[columns_dict[number]['to_drop']['row'][0]].isin(month)].index, inplace=True)
            except Exception as e:
                logging.error(f"Failed to drop rows: {e}")

    return df


# def read_convert_file(current_dir="./", filename=None):


    # Принудительно преобразовывать все данные через pd.to_numeric(df[col], errors='coerce')


    # Файл Анализ закупки слябов для ЛПЦ  Стан-5000.xlsx
    # Чистим каждый файл от двойных кавычек
    # df.columns = df.columns.str.replace('"', "'")
    # Удаляем пустые строки из всех столбцов 
    # df.drop(columns=['Unnamed: 0'], inplace=True)
    # month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август',
    #             'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
    # df.drop(df[~df['Планируемый период поставки слябов'].isin(month)].index, inplace=True)




    # Чистим исходные данные вот таким образом
    # for col in data_type:
    # df[col] = pd.to_datetime(df[col], errors='coerce')

    # конфигурационные данные по каждому файлу в файле config.py
    # Надо ли добавлять столбцы для дропа????


    # Файл Открытая потребность.xlsx
    # преобразуем данные после чтения вот таким образом
    # Надо поменять названия столбцов, чтобы они стали короче и правильно записывались в БД
    # header = ['Вид заказа', 'Номер заявки CRM', 'Статус позиции УПЗ', 'Дивизион', 'Ид. задания на производство (Металл)', 'Ид. задания на производство (Труба)', 
    #           'Цех', 'Диаметр', 'Толщина', 'Марка стали', 'Класс прочности', 'ГОСТ/ТУ', 'ГОСТ/ТУ внешней изоляции', 'ГОСТ/ТУ внутреннего покрытия', 
    #           'Толщина изоляции', 'Номер заказа', 'Номер позиции', 'Изменение', 'Требуемый объем', 'Отправлено из цеха', 'Отгружено', 'Требуемое кол-во на СГП', 
    #           'Выбрано клиентскими заказами', 'Номер связанного заказа (SAP)', 'Управление', 'Менеджер', 'Клиент', 'Вид транспортировки', 'Пункт назначения', 
    #           'Требуемая дата', 'ДПТС', 'Статус подтверждения (ГП на СГП)', 'Статус согласования (ГП на СГП)', 'Время на доставку, дн', 'Время на отгрузку, дн', 
    #           'ПДД завершения отгрузки', 'Начало интервала доставки', 'Комментарий к подтверждению (ГП на СГП)', 'Решение о согласовании (ГП на СГП)', 
    #           'Решение об обеспечении металлом', 'Комментарий к подтверждению (металл)', 'ИДН заявки на металл', 'Номер заказа.1', 'Номер заказа.2', 
    #           'Новая потребность', 'Изменение потребности', 'Произведено', 'Упаковано', 'Объем по счетам-фактурам', 'Ед. изм. объема', 'Требуемая дата доставки', 
    #           'Конец интервала доставки', 'Класс продукции', 'Номенклатурный номер', 'Описание продукции', 'Попутчик', 'Неликвид', 'Группа прочности', 
    #           'Группа продукции', 'Количество швов', 'Тип резьбы', 'Термообработка', 'Номер чертежа колеса', 'Ширина', 'Организация', 'Номер спецификации', 
    #           'Цепочка поставок', 'Расшифровка вида заказа', 'Статус заказа', 'Статус заказа (расшифровка)', 'Статус позиции', 'Статус позиции (расшифровка)', 
    #           'Тип заказа ORM', 'Место отгрузки ORM', 'Состояние позиции ORM', 'ИНКОТЕРМС', 'Условия поставки по ИНКОТЕРМС', 'Рынок сбыта', 
    #           'Номер позиции связанного заказа (SAP)', 'Тип связанного заказа (SAP)', 'Номер связанного заказа (УПЗ)', 'Номер позиции связанного заказа (УПЗ)', 
    #           'Тип связанного заказа (УПЗ)', 'Макс объем к доставке, тн/сут', 'Макс объем к доставке, ваг/сут', 'Количество к доставке', 
    #           'Начало ожидаемого интервала доставки', 'Конец ожидаемого интервала доставки', 'Статус подтверждения (доставка)', 
    #           'Комментарий к подтверждению (доставка)', 'Статус исполнения ( день )', 'Вид проверки на соответствие', 'Статус проверки на соответствие', 
    #           'Комментарий к проверке на соответствие', 'Результат проверки', 'Дата УМПО', 'Дата УФРВУ', 'БДД начала отгрузки', 'ПДД начала отгрузки', 
    #           'Начало ожидаемого интервала отгрузки', 'Конец ожидаемого интервала отгрузки', 'Количество к отгрузке', 
    #           'Максимально разрешенный объем к отгрузке, тн/сут', 'Максимально разрешенный объем  к отгрузке, ваг/сут', 'Статус подтверждения (отгрузка)', 
    #           'Комментарий к подтверждению (отгрузка)', 'Согласованная ДПТС', 'Зарезервированный запас', 'Статус нарушения дат отгрузки', 
    #           'Комментарий к согласованию (ГП на СГП)', 'Дата согласования (ГП на СГП)', 'Начало ожидаемого интервала (ГП на СГП)', 
    #           'Конец ожидаемого интервала (ГП на СГП)', 'Интервал ДПТС (вручную)', 'Флаг удовлетворения потребности со склада', 'Ожидаемая кампания СВАРКА', 
    #           'Агрегат (сварка)', 'Время начала кампании (сварка)', 'Время окончания кампании (сварка)', 'Ожидаемая кампания ИЗОЛЯЦИЯ', 'Агрегат (изоляция)', 
    #           'Время начала кампании (изоляция)', 'Время окончания кампании (изоляция)', 'Ожидаемая кампания ОТДЕЛКА', 'Агрегат (отделка)', 
    #           'Время начала кампании (отделка)', 'Время окончания кампании (отделка)', 'Наименование кампании', 'Статус планирования', 
    #           'Статус подтверждения (производство)', 'Комментарий к подтверждению (производство)', 'Статус проверки УФРВУ', 'Комментарий к проверке УФРВУ', 
    #           'Флаг соответствия запросу', 'Производительность СВАРКА', 'Комментарий к запросу', 'Производительность ВНЕШНЯЯ ИЗОЛЯЦИЯ', 'Классификация ZQT', 
    #           'Производительность ОТДЕЛКА', 'Комментарий к классификации ZQT', 'Статус пр-ва', 'Комментарий к прогнозу', 'Стратегия', 'Требуется процессу ДОСТАВКА', 
    #           'Требуется процессу ОТГРУЗКА', 'Требуется процессу ПРОИЗВОДСТВО', 'Требуется процессу НАЛИЧИЕ НА СКЛАДЕ', 'Дата (металл)', 
    #           'Статус подтверждения (металл)', 'Цена EXW, руб/тн', 'Цена EXW (прогноз), руб/тн', 'Затраты, руб/тн', 'Маржа, руб/тн', 'Маржа, руб/ч', 
    #           'Производительность по узкому месту', 'Сквозной выход годного', 'Окно доходности от', 'Окно доходности до', 'Клиент УП', 'Продукт УП', 'География УП', 
    #           'Статус проверки на окно продаж', 'Статус согласования продаж', 'Комментарий к согласованию продаж', 'Маршрут производства', 'Ид. позиции заказа', 
    #           'Номер заказа прогноза', 'Номер позиции прогноза', 'Проект', 'Срок жизни запроса', 'Дата действия ответа на запрос', 'Дата закрытия УПЗ', 
    #           'Дата создания позиции в ERP системе', 'Дата создания записи', 'Список заказов MM к позиции заказа', 'Список заказов ZUB к позиции заказа', 
    #           'Список заявок на металл к позиции заказа']
    # df1.columns = header
    # df1[date_type] = df1[date_type].replace({'NaT': None})
    # for i in numeric_type:
    #     df1[i] = pd.to_numeric(df1[i], errors='coerce')
    # for i in date_type:
    #     df1[i] = pd.to_datetime(df1[i], errors='coerce')
    # for i in date_type:
    #     df1[i] = df1[i].astype(str)




    # params = {
    #     "convert_int"   :   ['№ плавки', 'Клиентский заказ'],
    #     "convert_float" :   ['Длина фактическая', 'Толщина', 'Ширина'],
    #     "objects"       :   [ 'Наименование склада', 'Склад', 'Наименование материала', 
    #                         'ID № продукта', 'Партия', 'Марка стали', 'ВидМатериала', 'НаимГрМатер', 
    #                         'Поставщик-1', 'НТД качества', 'НомерЗаказаПоставщика'],
    #     "numeric"       :   ['БЕ', 'Завод', 'Номенкл.№', 'ОстКонПериода', 'ФактичСтоим', 'Номер заказа ММ на поставку'],
    #     "other"         :   ['ДатаВзЗап']
    # }  

    # df = reading()
    # # new_df =clean_and_convert(df, **params)
    # return df


# print(read_convert_file().head(3))
query = [sql_schema_query_1, sql_schema_query_2, sql_schema_query_3, sql_schema_query_4, sql_schema_query_5, sql_schema_query_6, sql_schema_query_7]
if __name__ == "__main__":
    logging.info("Starting main process")
    start = time.time()
    # current_dir = "./"
    current_dir = "C:/для работы/база/эксперименты/supremeDB"
    for i in DATA_PARAMS1:

        file_name = DATA_PARAMS1[i]["file_name"]
        skiprows = DATA_PARAMS1[i]["skiprows"]
        data_type = DATA_PARAMS1[i]["data_type"]
        table_name = DATA_PARAMS1[i]["table_name"]

        print("В работе: ", file_name)

        logging.info(f"Processing file: {file_name}")
        df = reading(file_name, current_dir, skiprows)
        if df is not None:
            df = drop_function(df, i)
            df = clean_and_convert(df, data_type)

            sql_schema_query = query[i-1]
            send_sql_query(sql_schema_query, DB_ARGS)

            engine = create_engine("postgresql+psycopg2://postgres:1@localhost:5432/slab")
            logging.info(f"Uploading data {file_name} to table: {table_name}")
            df.to_sql(table_name, con=engine, if_exists='append', index=False)
        else:
            logging.error(f"Skipping file due to read error: {file_name}")

    logging.info("Main process completed")


    end = time.time()

    print("Общее время :  ", end - start)


    # TODO: сделать функцию логирования
    # TODO: написать отдельные файлы для каждого файла, или несколько файлов объединить в один
